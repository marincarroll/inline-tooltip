import { registerFormatType, removeFormat, applyFormat } from '@wordpress/rich-text';
import { RichTextToolbarButton } from '@wordpress/block-editor';
import { Modal, TextControl, Button } from '@wordpress/components';
import { useState } from '@wordpress/element';
import { __ } from '@wordpress/i18n';

import './style.scss';

const name = 'mctooltip/tooltip';

const tooltipEditor = props => {
	const { 
		isActive, 
		onChange, 
		value 
	} = props;

	const icon = (
		<svg><path d="M19.7187642,3.5 C20.6800125,3.5 21.4628244,4.26117182 21.4987144,5.21295275 L21.5,5.28125356 L21.5,15.9687749 C21.5,16.9300328 20.7395427,17.7128525 19.7871137,17.7487429 L19.7187642,17.7500285 L15.2974996,17.7500285 L12.503192,22.2209274 C12.3948358,22.3946087 12.2048374,22.5 12,22.5 C11.8122324,22.5 11.6369352,22.411434 11.5255597,22.2629016 L11.496808,22.2209274 L8.70250038,17.7500285 L4.28123575,17.7500285 C3.32071125,17.7500285 2.53720927,16.9895636 2.5012868,16.0371251 L2.5,15.9687749 L2.5,5.28125356 C2.5,4.32071946 3.2611642,3.53720964 4.21293562,3.50128681 L4.28123575,3.5 L19.7187642,3.5 Z M19.7186123,4.68750238 L4.28123575,4.68750238 C3.96880587,4.68750238 3.71279821,4.92849696 3.68912499,5.23483477 L3.6873385,5.28125356 L3.6873385,15.9687749 C3.6873385,16.2812079 3.92833068,16.5370803 4.23466543,16.5607406 L4.28108375,16.5625261 L9.03104575,16.5625261 C9.21881333,16.5625261 9.39411054,16.6510921 9.50548607,16.7996245 L9.53423773,16.8415987 L11.999848,20.7863866 L14.4654583,16.8415987 C14.5647847,16.6823909 14.7327134,16.5805656 14.9177887,16.5647003 L14.9686503,16.5625261 L19.7186123,16.5625261 C20.0310421,16.5625261 20.2869119,16.3215315 20.310572,16.0151937 L20.3123575,15.9687749 L20.3123575,5.28125356 C20.3123575,4.96882056 20.0713653,4.71294821 19.7650306,4.68928788 L19.7186123,4.68750238 Z M11.5177409,9.17517115 C11.978136,9.17517115 12.3336997,9.28728138 12.5821933,9.51015262 C12.8315664,9.73348123 12.9569325,10.0237901 12.9569325,10.3797644 L12.9552803,10.4452856 L12.9552803,10.4452856 L12.9504076,10.5320751 L12.9504076,10.5320751 L12.9373348,10.7025055 C12.935511,10.7241428 12.9335662,10.7466839 12.9315029,10.7701321 C12.9172269,10.9184172 12.8929576,11.0575551 12.8609797,11.1868608 L12.8355865,11.2819859 L12.3582315,12.9738728 C12.3198645,13.1100973 12.2841745,13.2659768 12.253392,13.440608 C12.2226096,13.6143475 12.2083336,13.7461058 12.2083336,13.8358809 C12.2083336,14.0605359 12.256961,14.2128423 12.3582315,14.2950241 C12.4581635,14.3763117 12.6321479,14.4169561 12.8788599,14.4169561 C12.9076346,14.4169561 12.9390582,14.4073254 12.97189,14.3943309 L13.0390634,14.3657138 C13.118765,14.3314273 13.2016297,14.3015736 13.2718952,14.355766 C13.4802333,14.5178884 13.267875,14.8711872 12.8663656,15.059665 C12.5179491,15.2239588 12.088333,15.3360656 11.7876463,15.3360656 C11.3245673,15.3360656 10.929305,15.1248113 10.6718917,14.8970234 C10.4149238,14.6696815 10.2868852,14.3820481 10.2868852,14.033666 C10.2868852,13.8974415 10.2958072,13.7589874 10.3149907,13.6169544 C10.3314074,13.503328 10.3543915,13.3785567 10.383943,13.2417214 L10.4073381,13.1368185 L10.8869201,11.4382999 C10.9306412,11.276166 10.9649927,11.1211783 10.9944366,10.9760239 C11.0225432,10.8313154 11.0390497,10.6968746 11.0390497,10.5776181 C11.0390497,10.3601094 10.9930993,10.2091453 10.9034278,10.1242834 C10.8137517,10.0389745 10.6451122,9.99609701 10.3930552,9.99609701 C10.2690368,9.99609701 10.1450184,9.50836892 10.7040092,9.31184158 C10.9890837,9.21268834 11.2616638,9.17517115 11.5177409,9.17517115 Z M12.5759347,6.30327869 C12.8891158,6.30327869 13.1567964,6.4086886 13.3794105,6.61771329 C13.6020292,6.82719534 13.7131148,7.07865155 13.7131148,7.37343114 C13.7131148,7.66866808 13.6020247,7.92012429 13.3794105,8.12781121 C13.156785,8.33505677 12.8891158,8.43912433 12.5759347,8.43912433 C12.2636445,8.43912433 11.9937368,8.33505219 11.7697865,8.12781121 C11.54717,7.92011286 11.4343006,7.66865665 11.4343006,7.37343114 C11.4343006,7.07864012 11.5471723,6.82718391 11.7697865,6.61771329 C11.9937368,6.40868632 12.2636445,6.30327869 12.5759347,6.30327869 Z"></path></svg>
	);	
	
	const [ modalOpen, setModalOpen ] = useState( false );
	const [ content, setContent ] = useState();

	const closeModal = () => setModalOpen( false );

 	const clickToolbarButton = () => {
		if( !isActive ) {
			setModalOpen( true )
		} else {
			onChange( removeFormat( value, name ) )
		}
	};

	const changeContent = def => {
		setContent( def );
	}

	const applyContent = () => {
		onChange(
			applyFormat( value, {
				type: name,
				attributes: {
					title: content,
					'aria-label': content,
					'aria-role': 'tooltip'
				}
			} )
		)
	}

	return (
		<>
			<RichTextToolbarButton
				icon={ icon }
				title={ __( 'Tooltip', 'mctooltip' ) }
				onClick={ clickToolbarButton }
				isActive={ isActive }
			/>
			{ modalOpen &&
				<Modal 
					title={ __('Tooltip Content', 'mctooltip') }
					onRequestClose={ closeModal }
				>
					<TextControl
						value={ content }
						onChange={ changeContent }
						placeholder={ __('Enter content....', 'mctooltip') }
					/>
					<Button
						variant="primary"
						disabled={ !content ? true : false }
						text={ __('Apply', 'mctooltip') }
						onClick={ applyContent }
					/>
				</Modal>
			}
		</>
	);
};

registerFormatType(
    name, {
        title: __('Tooltip', 'mctooltip'),
        tagName: 'span',
        className: 'mctooltip',
    	edit: tooltipEditor
	}
)